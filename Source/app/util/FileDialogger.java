/*** Copyright 2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>*/package app.util;import java.awt.FileDialog;import java.awt.Frame;import java.io.File;// --- Revision History ---// 20Jul2003 GLG  create// 21Jul2003 GLG  refactor makeFileDialog() and show()// 07Aug2003 GLG  use a String[] of prop-names, not just a single String, for flexibility/**** FileDialogger is a static factory class for making specialized kinds of FileDialog.** It knows how to make a directory-choosing FileDialog and an** app-bundle-choosing FileDialog on Mac OS or Mac OS X,** under JDK 1.1, 1.3.1, or 1.4.1.**<p>** It sorta works under Mac OS 10.0, but you can't select app-bundles, so** it's not very useful.**<p>** No special FileDialogs are created on other platforms.**** @author Gregory Guerin*/public class FileDialogger  extends FileDialog{	/** Use this kind to make a FileDialog that can choose directories on Mac OS and Mac OS X. */	public static final int LOAD_DIR = 10;	/** Use this kind to make a FileDialog that can choose app-bundles on Mac OS X. */	public static final int LOAD_APP = 11;	private static final String[] NO_PROPS = new String[ 0 ];	/**	** Create a FileDialog according to given args.	** This is a Factory Method.	** It may return a FileDialog subclass.	*/	public static FileDialog	makeFileDialog( Frame parent, String prompt, int kind )	{		// For possible use invoking my constructor.		String[] propNames = NO_PROPS;		// If non-standard kind, set special parameters...		if ( kind == LOAD_DIR  ||  kind == 3 )		{			// Accept a kind=3 value, to simplify conversion from older Mac OS code.			kind = LOAD;			// Mac OS -- use special property or mode 3.			if ( System.getProperty( "os.name", "" ).startsWith( "Mac OS" ) )			{				// Always set special property.  It should be harmless before J2SE 1.4.				propNames = new String[] { "apple.awt.fileDialogForDirectories" };				// On Mac OS , there is only JDK 1.1 and JDK 1.3 where mode 3 works.				// All others will use LOAD and special property.				// This is defensive for when JDK 1.5 appears on Mac OS X, when I hope				// this special property name won't be arbitrarily changed.				String jvm = System.getProperty( "java.version", "" );				if ( jvm.startsWith( "1.1" )  ||  jvm.startsWith( "1.3" ) )					kind = 3;			}		}		if ( kind == LOAD_APP )		{			kind = LOAD;			// Mac OS -- use one of two special properties, depending on JVM version.			// This works only on Mac OS X, even though we key on "Mac OS".			if ( System.getProperty( "os.name", "" ).startsWith( "Mac OS" ) )			{				// Use a 2-item array, one of which may remain null.				// This is a leftover barnacle, but it's harmless.				propNames = new String[ 2 ];				// By default, assume a 1.4+ JVM.  Has no effect under classical Mac OS.				// This is defensive for when JDK 1.5 appears on Mac OS X, when I hope				// this special property name won't be arbitrarily changed.				propNames[ 0 ] = "apple.awt.use-file-dialog-packages";				if ( System.getProperty( "java.version", "" ).startsWith( "1.3" ) )					propNames[ 0 ] = "com.apple.macos.use-file-dialog-packages";			}		}		// Getting here, return an appropriate FileDialogger		return ( new FileDialogger( parent, prompt, kind, propNames ) );	}	/**	** Convenience method calls makeFileDialog() followed by runFileDialog().	** Returns a fully qualified File or null.	*/	public static File	runFileDialog( Frame parent, String prompt, int kind )	{  return ( runFileDialog( makeFileDialog( parent, prompt, kind ) ) );  }	/**	** Show the FileDialog and return a fully qualified File or null.	*/	public static File	runFileDialog( FileDialog theDialog )	{		theDialog.setVisible( true );			// current thread blocks here waiting for dialog to end.		String targetName = theDialog.getFile();		String targetPath = theDialog.getDirectory();//		System.err.println( "# getFile(): " + targetName );//		System.err.println( "#  getDir(): " + targetPath );		if ( targetName == null  ||  targetPath == null )			return ( null );		// Return the two parts assembled into a File.		return ( new File( targetPath, targetName ) );	}	/** Optional property-names set to "true" in show(). */	private final String[] propNames;	/** Only instantiable by this class, via factory method. */	private	FileDialogger( Frame parent, String prompt, int mode, String[] propNames )	{		super( parent, prompt, mode );		this.propNames = propNames;	}	/**	** This method override may set a system property to "true" before calling super.show(),	** and then restore it to its prior value before returning.	**<p>	** This method may set system properties using System.getProperties() to 	** retrieve the Properties instance.  This has security implications for applets.	*/	public void	show()	{		String[] names = propNames;		if ( names == null )			names = NO_PROPS;		// Holds prior values of properties, if any, for later restore.		String[] values = new String[ names.length ];		// Save prior values, if any, and set new values to "true".		for ( int i = 0;  i < names.length;  ++i )		{			String key = names[ i ];			if ( key != null )			{				values[ i ] = System.getProperty( key );				// On 1.2+, could use setProperty(), but must be 1.1-compatible.				System.getProperties().put( key, "true" );			}		}		// Show myself, presumed modal.		super.show();		// Restore must either remove() or put() the property.		for ( int i = 0;  i < names.length;  ++i )		{			String key = names[ i ];			if ( key != null )			{				String prior = values[ i ];				if ( prior == null )					System.getProperties().remove( key );				else					System.getProperties().put( key, prior );			}		}	}}