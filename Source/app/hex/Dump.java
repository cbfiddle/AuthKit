/*** Copyright 1998-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>*/package app.hex;import java.io.*;// --- Revision History ---// 09Nov97 GLG  make these dumping methods// 17Feb99 GLG  refactor// 18Feb99 GLG  continue rework// 14Apr99 GLG  uh, doc-comments, I guess// 30Jun99 GLG  add hexLine( PrintStream, ... )// 14Jul99 GLG  refactor// 01Jun2001 GLG  move to 'app.util' package// 06Jun2003 GLG  change package/**** A collection of static methods for dumping bytes in hex.** Extends Hex class for formatting.**** @author Gregory Guerin**** @see Hex*/public class Dump  extends Hex{	/**	** Print the String to System.out.	*/	public static void	text( String toShow )	{		System.out.print( toShow );	}	/**	** Print a new-line to System.out.	*/	public static void	newLine()	{		System.out.println( "" );	}	/**	** Dump the bytes indicated in one line of text,	** preceded by a given non-null prefix, and	** followed by a call to Dump.newLine().	*/	public static void 	hexLine( PrintStream out, String prefix, byte[] data, int offset, int count )	{		StringBuffer hexBuf = new StringBuffer( 3 );		out.print( prefix );		for ( int gap = 0;  count > 0;  --count, ++offset )		{			hexBuf.setLength( 0 );			appendDigits( hexBuf, 0xFF & data[ offset ], 2, 16 );			hexBuf.reverse();			hexBuf.append( ' ' );			if ( (++gap & 0x03) == 0 )  { hexBuf.append( ' ' ); }			out.print( hexBuf.toString() );		}		out.println();	}	/**	** Dump the bytes indicated in one line of text,	** preceded by a given non-null prefix, and	** followed by a call to Dump.newLine().	*/	public static void 	hexLine( String prefix, byte[] data, int offset, int count )	{  hexLine( System.out, prefix, data, offset, count );  }		/**	** Dump all the data bytes, first showing the header.	*/	public static void 	hexBlock( String header, byte[] data )	{		Dump.hexBlock( header, data, data.length );	}		/**	** Dump only the given count of the data bytes, first showing the header.	** Always starts dumping at offset 0 in data.	*/	public static void 	hexBlock( String header, byte[] data, int count )	{		Dump.newLine();		Dump.text( "BLOCK: " );  		Dump.text( header );  		Dump.newLine();			if ( count > data.length )			count = data.length;		int hop = 16;		for ( int line = hop, offset = 0;  count > 0;  offset += hop, count -= hop )		{			if ( count < hop )  line = count;			Dump.hexLine( " ", data, offset, line );		}		Dump.text( "BLOCK END -----" );		Dump.newLine();	}}