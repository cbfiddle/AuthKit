/*** Copyright 1998-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>*/package app.hex;// --- Revision History ---// 06Jul99 GLG  factor out of Dump class// 01Jun01 GLG  move to 'app.util' package// 15Nov2002 GLG  add appendHex()// 06Jun2003 GLG  change package/**** Static methods for formatting values in hex-character form.** Contains no actual output methods.**** @author Gregory Guerin*/public class Hex{	/**	** Return a zero-filled hex string at least minDigits in length, representing the unsigned value.	** More digits will be present if the value is larger than minDigits indicates.	*/	public static String	getHex( int value, int minDigits )	{  return ( getHex( 0xFFFFFFFFL & value, minDigits ) );  }	/**	** Return a zero-filled hex string at least minDigits in length.	** More digits will be present if the value is larger than minDigits indicates.	*/	public static String	getHex( long value, int minDigits )	{		StringBuffer hexBuf = new StringBuffer( minDigits );		return ( appendHex( hexBuf, value, minDigits ).reverse().toString() );	}	/**	** Return a zero-filled hex string at least minDigits in length.	** More digits will be present if the value is larger than minDigits indicates.	*/	public static StringBuffer	appendHex( StringBuffer build, long convert, int minDigits )	{		do		{			build.append( Character.toUpperCase( Character.forDigit( (int) (convert & 0x0F), 16 ) ) );			convert >>>= 4;			--minDigits;		}  while ( convert != 0L  ||  minDigits > 0 );		return ( build );	}	/**	** Append at least N digits in reverse order, zero-padded to minDigits length if necessary.	** The incoming StringBuffer arg is returned, to facilitate concatenated method invocations.	*/	public static StringBuffer	appendDigits( StringBuffer build, long convert, int minDigits, int base )	{		do		{			build.append( Character.toUpperCase( Character.forDigit( (int) (convert % base), base ) ) );			convert /= base;			--minDigits;		}  while ( convert != 0L  ||  minDigits > 0 );		return ( build );	}}