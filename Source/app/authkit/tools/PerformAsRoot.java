/*** Copyright 2002-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the Authorization Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/index.html#authkit> */package app.authkit.tools;import java.io.*;import java.util.*;import glguerin.authkit.*;// --- Revision History ---// 17Jul2003 GLG  create// 31Jul2003 GLG  call waitForEnvoy()// 06Aug2003 GLG  call detach(true) in 'finally' clause/**** PerformAsRoot is a Tool that runs any Task as a privileged Envoy task.** It is conceptually similar to the 'sudo' command in Mac OS X, but uses a** completely different authorization method, and is a Java program. **<p>** Tasks are grouped using ":-" between them.** Task-names must be fully qualified class names of a concrete Task** with a no-args constructor.** Task-args come after the task-name.  Shell expressions that expand to pathnames** are evaluated before PerformAsRoot is launched, so must be accessible to the current user.** If a Task returns a non-zero result from perform(), the Envoy stops executing Tasks** and returns a non-zero result.**<p>** Output from the privileged Envoy process is simply echoed to stdout.** Ditto for stderr output.**<p>** PerformAsRoot performs no GUI-based user-interaction other than the system authentication dialog.** You could make a Tool similar to PerformAsRoot that prompted with a FileDialog and returned** results in an alert.  This is left as an exercise for the interested reader.****<h3>System Properties Used</h3>**** Uses the app.authkit.envoy.Tool properties.****<h3>Exit Status Codes</h3>**** Exits with the status of the Envoy process, as returned on the Envoy protocol stream.**** @author Gregory Guerin**** @see app.authkit.envoy.Envoy** @see app.authkit.envoy.Task** @see app.authkit.envoy.Tool*/public class PerformAsRoot  extends app.authkit.envoy.Tool{	/** Static entry point when used as a command-line tool. */	public static void 	main( String[] args ) 	{  new PerformAsRoot().perform( args );  }	/** Perform arbitrary Tasks in a privileged Envoy process, echoing all output. */	public void 	perform( String[] args )	{		// Create Authorization and attach it to a new session.		Authorization auth = newAuth();		auth.isAvailable( Privilege.EMPTY );//		explain( "#Auth: " + auth.getClass() );		// Hack for Mac OS 10.1 JavaApplicationStub.		args = stripPrefixed( args, "-psn_" );		// If no args supplied, do nothing.		if ( args.length == 0 )			return;		int status = 0;		try		{			// The Envoy's command-line does not specify a task-name, so the first			// arg in args[] is treated as the first task-name.			String[] envoyCmd = makeEnvoyCommand( "bin/java", null,					"app.authkit.envoy.Envoy", "envoy.",					null, args );			// Start the privileged process, then wait for it to finish.			// Really just wait for EOF on its piped stream, parsing its output and echoing it.			Process child = auth.execPrivileged( envoyCmd );			status = waitForEnvoy( child.getInputStream(), System.out );		}		catch ( UnauthorizedException why )		{			// If unauthorized, summarize why, then depart with failure code.			explain( why.getMessage() );			depart( 2 );		}		catch ( Throwable other )		{			// Other failures will fully explain why, then depart with failure code.			explain( other );			depart( 3 );		}		finally		{			// Destroys all shared credentials.			auth.detach( true );		}		depart( status );	}}