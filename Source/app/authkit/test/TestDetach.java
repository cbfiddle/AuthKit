/*** Copyright 2002-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the Authorization Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/index.html#authkit> */package app.authkit.test;import glguerin.authkit.*;// --- Revision History ---// 29Nov2002 GLG  create// 17Jun2003 GLG  revise to call detach(true)/**** TestDetach calls Authorization.detach(true) on a session it attaches to.** As long as there is at least one connection to the session, it should persist across detach()'s.**<p>** The parameters determine how it attaches to a session.** All args are treated as file-names holding a secret identifier.** Each file is read for its secret, then attach() is called, and then detach(true).**<p>** If there are no args, then this program assumes it's a child of execPrivileged(),** so an attachPrivileged() will attach to the session, then detach(true) is called.** This option is only possible via this class's main(), not via testAuth().**<p>** The property "authkit.imp" is ** the fully qualified class name of an Authorization to instantiate and use.**** @author Gregory Guerin*/public class TestDetach  extends AuthTest{	/**	** Static entry point, when used as an application.	*/	public static void 	main( String[] args ) 	{		// All diagnostic messages are sent to stderr.		Authorization auth = makeAuth( null );		explain( "Authorization: " + auth.getClass() );		TestDetach self = new TestDetach();		// Decide wheter to attach() or to attachPrivileged().		if ( args.length == 0 )			self.testAuthPrivileged( auth );		else			self.testAuth( auth, "interact", args );		explain( "TestDetach.main(): done...\n" );	}	/**	** Attach to the privileged session used to execute this program, then detach() it.	*/	private void	testAuthPrivileged( Authorization auth )	{		try		{			auth.attachPrivileged();			auth.detach( true );		}		catch ( UnauthorizedException why )		{  explain( why );  }		catch ( IllegalArgumentException why )		{  explain( why );  }	}	/**	** Do the test on one arg.	** The 'interact' flag is unused.	** The arg is treated as a file-name whose contents is a secret identifier.	** Any UnauthorizedException elicits a stack-trace, but does not stop.	*/	public void	testAuthOne( Authorization auth, boolean interact, String arg )	{		// Attach to the session in the file.		resession( auth, arg );		// Detach, including shared credentials.		auth.detach( true );	}}