/*** Copyright 2002-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the Authorization Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/index.html#authkit> */package app.authkit.test;import glguerin.authkit.*;import app.hex.*;// --- Revision History ---// 22Nov2002 GLG  create// 20Jun2003 GLG  cleanup/**** Test attach() using a secret identifier locally (in a single process).** This tests how well two distinct Authorizations will refer to a single underlying session.**<p>** The property "authkit.imp" is ** the fully qualified class name of an Authorization to instantiate and use.**** @author Gregory Guerin*/public class TestReattach  extends AuthTest{	/**	** Static entry point, when used as an application.	*/	public static void 	main( String[] args ) 	{		tell( "TestReattach.main(): starting..." );		Authorization auth = makeAuth( null );		tell( "Authorization: " + auth.getClass() );		Dump.hexBlock( "## Secret form:", auth.getSecretIdentifier() );		new TestReattach().testAuth( auth, "interact", args );		tell( "TestReattach.main(): done...\n" );	}	/**	** Do the test on one arg.	** This methood doesn't use the 'interact' arg.	** The 'arg' is a filename, into which is dumped the hex form of a reinternalized session.	** Also dumped into the file is the externalized 'auth' session ID, for comparison purposes.	**<p>	** The concrete Authorization's Class is used to construct a new instance.	** This method naively assumes that Class.newInstance() will work for this.	** A smarter approach would be to use a Constructor.	**<p>	** This method DOES NOT handle the secret identifier securely.	** This suffices for a test, but DO NOT do this in production code.	*/	public void	testAuthOne( Authorization auth, boolean interact, String arg )	{		tellWhich( auth );		byte[] secret = auth.getSecretIdentifier();		putHexTo( arg, secret );		Authorization replica = null;		try		{  replica = (Authorization) auth.getClass().newInstance();  }		catch ( IllegalAccessException why )		{  explain( why );  return;  }		catch ( InstantiationException why )		{  explain( why );  return;  }		replica.release();		replica.attach( secret );		tellWhich( replica );		putHexTo( arg, replica.getSecretIdentifier() );	}}