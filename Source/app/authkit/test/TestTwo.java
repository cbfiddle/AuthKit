/*** Copyright 2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the Authorization Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/index.html#authkit> */package app.authkit.test;import glguerin.authkit.*;// --- Revision History ---// 17Jun2003 GLG  create/**** TestTwo tests the independence of two distinct Authorizations, connected to two** different underlying sessions, within a single process.** The two sessions should be entirely distinct.  That is, privileges granted in one should not** appear in the other unless the privilege is shared according to the authorization-policy rules.**<p>** Args are taken to be privilege-names, which are authorized (with interaction)** first in one Authorization and then in the other.** Failures and successes are displayed.**<p>** On Mac OS X, the default policy rule is for a privilege to be shared and have a 5-minute timeout.** One privilege that isn't shared is "system.privilege.admin".  It has a 5-minute timeout.** The "sys.openfile." privilege is also unshared, and is a wildcard rule.** The "system.preferences" privilege is shared, and has no timeout.**<p>** For information on the default policy rules on Mac OS X, see "/etc/authorization" on your machine.** It is only readable by root or admin.  It is only writable by root.** Its contents are in XML property-list (plist) form, with important comments included.** You should read it in a plain-text editor, such as TextEdit, rather than in Property List Editor.**<p>** The property "authkit.imp" is ** the fully qualified class name of an Authorization to instantiate and use.**** @author Gregory Guerin*/public class TestTwo  extends AuthTest{	/**	** Static entry point, when used as an application.	*/	public static void 	main( String[] args ) 	{		tell( "TestTwo.main(): starting..." );		Authorization auth = makeAuth( null );		tell( "Authorization: " + auth.getClass() );		new TestTwo().testAuth( auth, "interact", args );		tell( "TestTwo.main(): done...\n" );	}	private Authorization myOther = null;	/**	** Do the test on one arg.	**<p>	** The concrete Authorization's Class is used to construct the new instance of myOther.	** We naively assume that Class.newInstance() will work for this.	** A smarter approach would be to use a Constructor.	*/	public void	testAuthOne( Authorization auth, boolean interact, String arg )	{		if ( myOther == null )		{			try			{  myOther = (Authorization) auth.getClass().newInstance();  }			catch ( Throwable why )			{  explain( why );  return;  }			// This causes a new session to be established.			// It should be an entirely different session than the one in 'auth'.			myOther.isAvailable( Privilege.EMPTY );		}		Privilege priv = new Privilege( arg );		obtain( auth, priv, interact );		obtain( myOther, priv, interact );	}	private void	obtain( Authorization auth, Privilege priv, boolean withInteraction )	{		tellWhich( auth );		tellPrivilege( "    avail: ", priv, auth );		// Do authorize() but catch exceptions and always continue.		try		{  auth.authorize( priv, withInteraction );  }		catch ( UnauthorizedException why )		{  /* DO NOTHING */ }		// Getting here, we are authorized.		tellPrivilege( "     auth: ", priv, auth );	}}