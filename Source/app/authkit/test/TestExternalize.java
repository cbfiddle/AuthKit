/*** Copyright 2002-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the Authorization Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/index.html#authkit> */package app.authkit.test;import glguerin.authkit.*;import app.hex.*;// --- Revision History ---// 29Oct2002 GLG  create stub// 20Jun2003 GLG  FIX: treat args as Privilege names, not cmd names (duh!)/**** TestExternalize is a test of secret identifiers and multiple calls to release().** Each arg is treated as a Privilege name, its availability is tested with isAvailable(),** the session's secret identifier is displayed in hex, then the session is release()'d.**<p>** If the Privilege is unavailable or unauthorized, then it will display as such.** If the Privilege is shared and available, then it will display as such, and release() won't revoke it.** Since a new session is created each time around, due to the release(),** a new secret identifier will be displayed each time, and only shared granted Privileges** will continue to be available.** After the timeout of the shared Privilege expires, it will no longer be available.**<p>** The property "authkit.imp" is ** the fully qualified class name of an Authorization to instantiate and use.**** @author Gregory Guerin*/public class TestExternalize  extends AuthTest{	/**	** Static entry point, when used as an application.	*/	public static void 	main( String[] args ) 	{		tell( "TestExternalize.main(): starting..." );		Authorization auth = makeAuth( null );		tell( "Authorization: " + auth.getClass() );		new TestExternalize().testAuth( auth, "interact", args );		tell( "TestExternalize.main(): done...\n" );	}	/** Do the test on one arg.  Each arg is a Privilege name. */	public void	testAuthOne( Authorization auth, boolean interact, String arg )	{		// Treat arg as name of Privilege.		Privilege priv = new Privilege( arg );		// We don't overtly authorize the privilege, but we might already possess it anyway.		String prefix = "#Denied: ";		if ( auth.isAvailable( priv ) )			prefix = "Granted: ";		tell( prefix + priv );		// The Authorization is externalized, the secret data is displayed, then release() is called.		Dump.hexBlock( "## Secret form:", auth.getSecretIdentifier() );		auth.release();	}}