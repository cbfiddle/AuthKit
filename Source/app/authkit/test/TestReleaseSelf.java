/*** Copyright 2002-2003 by Gregory L. Guerin.** Terms of use:**  - Briefly: OPEN SOURCE under Artistic License -- credit fairly, use freely.**  - Fully: <http://www.amug.org/~glguerin/sw/artistic-license.html>** This file is from the Authorization Toolkit for Java:**   <http://www.amug.org/~glguerin/sw/index.html#authkit> */package app.authkit.test;import glguerin.authkit.*;// --- Revision History ---// 22Nov2002 GLG  create// 20Jun2003 GLG  cleanup/**** TestReleaseSelf tests how multiple release() and attach() calls work in a single process.** The underlying session should survive and its credentials persist throughout.**<p>** The property "authkit.imp" is ** the fully qualified class name of an Authorization to instantiate and use.**<p>** The optional property "interact" is true to perform interactive authentication, false to not.** If absent, the default state is true.**** @author Gregory Guerin*/public class TestReleaseSelf  extends AuthTest{	/**	** Static entry point, when used as an application.	*/	public static void 	main( String[] args ) 	{		tell( "TestReleaseSelf.main(): starting..." );		Authorization auth = makeAuth( null );		tell( "Authorization: " + auth.getClass() );		AuthTest self = new TestReleaseSelf();		self.tellWhich( auth );		self.testAuth( auth, "interact", args );		tell( "TestReleaseSelf.main(): done...\n" );	}	/**	** Do the test on one arg.	** The 'arg' is a command for which privileged-exec is authorize()'d.	** The 'interact' flag determines whether interaction is allowed or not.	**<p>	** Creates another Authorization and attaches it to the same session as the one given.	** After authorize() returns, release() is called on the replica Authorization.	** The purpose is to test the effect of release() on subsequent attach()'es.	**<p>	** The concrete Authorization's Class is used to construct a new instance.	** This method naively assumes that Class.newInstance() will work for this.	** A smarter approach would be to use a Constructor.	*/	public void	testAuthOne( Authorization auth, boolean interact, String arg )	{		Authorization replica = null;		try		{  replica = (Authorization) auth.getClass().newInstance();  }		catch ( IllegalAccessException why )		{  explain( why );  return;  }		catch ( InstantiationException why )		{  explain( why );  return;  }		// Use repeatedly below.		byte[] secret = auth.getSecretIdentifier();//		putHexTo( System.out, "## Secret Identifier:", "  ", secret, -1 );		// The replica is new-made, so attach() should always work.		replica.attach( secret );		// Before asking for the privilege, see if it's already available.		Privilege priv = replica.makeExecPrivilege( arg );		tellPrivilege( "Privilege: ", priv, replica );		// If already authorized (i.e. granted or available), no interaction will occur.		replica.authorize( priv, interact );		// Release replica's attachment, then re-attach to same.		replica.release();		replica.attach( secret );		// Should still be available, since authorize() worked in order to get here.		tellPrivilege( "Privilege: ", priv, replica );//		auth.release();//		auth.attach( secret );	}}